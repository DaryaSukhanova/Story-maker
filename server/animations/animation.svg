<svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewbox="0 0 1000 1000"><path stroke="#8DADFF" stroke-width="2" fill="none" d="M 254 122 L 257 121 L 258 117 L 263 108 L 268 97 L 278 85 L 294 75 L 313 69 L 334 66 L 355 66 L 368 66 L 374 66 L 376 69 L 377 71 L 380 73 L 385 73" id="animatedElementId"></path><path stroke="red" stroke-width="2" fill="none" id="motionPath" d="M 513 231 L 501 222 L 504 209 L 517 184 L 540 148 L 562 113 L 580 85 L 598 60 L 609 45 L 616 35 L 618 31 L 618 29 L 617 29"></path><script>
            <![CDATA[
                this.play = true
                this.currentSpeed = 4
                let distanceCovered = 0;
                let isAnimationSaved = false;
                let isUpdateTime = false
                function animate(element) {
    const motionPath = document.getElementById('motionPath');
    const totalLength = motionPath.getTotalLength();
    distanceCovered = 0;
    let speed = this.currentSpeed;
    element.setAttribute("x", 0);
    element.setAttribute("y", 0);
    if (element.type === "circle") {
      element.setAttribute("cx", 0);
      element.setAttribute("cy", 0);
    }
    const moveAlongPath = () => {
      if (this.play) {
        const point = motionPath.getPointAtLength(distanceCovered);
        if (element.hasAttribute("d") || element.hasAttribute("points")) {
          const initialX = element.getPointAtLength(0).x;
          const initialY = element.getPointAtLength(0).y;
          element.setAttribute("transform", `translate(${point.x - initialX} ${point.y - initialY})`);
        } else {
          element.setAttribute("transform", `translate(${point.x} ${point.y})`);
        }
        speed = this.currentSpeed;
        distanceCovered += speed;
        if (distanceCovered <= totalLength) {
          requestAnimationFrame(moveAlongPath);
        } else {
          distanceCovered = 0;
          const newStartTime = Date.now();
          if (isUpdateTime) {
            _store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].setStartTime(newStartTime);
          }
          requestAnimationFrame(moveAlongPath);
          if (_store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].isAnimationSaved) {
            console.log("isSave");
            this.saveAnimatedSvg();
            _store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].isAnimationSaved = false;
          }
        }
      } else {
        requestAnimationFrame(moveAlongPath);
      }
    };
    moveAlongPath();
  }
                const animatedElement = document.getElementById('animatedElementId');
                animate(animatedElement);
            ]]>
        </script></svg>