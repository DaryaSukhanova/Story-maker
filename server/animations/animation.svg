<svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewbox="0 0 1000 1000"><path stroke="#8DADFF" stroke-width="2" fill="none" d="M 115 79 L 116 79 L 117 77 L 120 76 L 125 73 L 129 70 L 134 66 L 141 61 L 146 58 L 151 56 L 155 56 L 158 55 L 161 55 L 164 56 L 167 57 L 172 60 L 176 61 L 182 62 L 189 62 L 195 61 L 199 59 L 204 57 L 206 55 L 208 53 L 208 52 L 209 52 L 210 52 L 212 52 L 213 52" id="animatedElementId"></path><path stroke="red" stroke-width="2" fill="none" id="motionPath" d="M 307 177 L 312 172 L 320 165 L 333 155 L 349 143 L 370 124 L 393 109 L 415 94 L 437 81 L 452 71 L 460 66 L 463 61 L 463 58 L 462 55 L 458 51 L 454 48 L 448 45"></path><script>
            <![CDATA[
                this.play = true
                this.currentSpeed = 4
                let distanceCovered = 0;
                let isAnimationSaved = false;
                let isUpdateTime = false
                
                function animate(element) {
    const motionPath = document.getElementById('motionPath');
    const totalLength = motionPath.getTotalLength();
    distanceCovered = 0;
    let speed = this.currentSpeed;
    element.setAttribute("x", 0);
    element.setAttribute("y", 0);
    if (element.type === "circle") {
      element.setAttribute("cx", 0);
      element.setAttribute("cy", 0);
    }
    this.playButton.className = "btn pause-button ";
    const moveAlongPath = () => {
      if (this.play) {
        const point = motionPath.getPointAtLength(distanceCovered);
        if (element.hasAttribute("d") || element.hasAttribute("points")) {
          const initialX = element.getPointAtLength(0).x;
          const initialY = element.getPointAtLength(0).y;
          element.setAttribute("transform", `translate(${point.x - initialX} ${point.y - initialY})`);
        } else {
          element.setAttribute("transform", `translate(${point.x} ${point.y})`);
        }
        speed = this.currentSpeed;
        distanceCovered += speed;
        if (distanceCovered <= totalLength) {
          requestAnimationFrame(moveAlongPath);
        } else {
          distanceCovered = 0;
          const newStartTime = Date.now();
          if (isUpdateTime) {
            _store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].setStartTime(newStartTime);
          }
          requestAnimationFrame(moveAlongPath);
          if (_store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].isAnimationSaved) {
            console.log("isSave");
            this.saveAnimatedSvg();
            _store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].isAnimationSaved = false;
          }
        }
      } else {
        requestAnimationFrame(moveAlongPath);
      }
    };
    moveAlongPath();
  }
                const animatedElement = document.getElementById('animatedElementId');
                animate(animatedElement);
            ]]>
        </script></svg>