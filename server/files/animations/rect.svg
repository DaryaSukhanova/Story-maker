<svg xmlns="http://www.w3.org/2000/svg" width="1000" height="1000" viewbox="0 0 1000 1000"><rect stroke="rgba(0, 0, 0, 1)" stroke-width="2" fill="rgba(0, 0, 0, 1)" data-tool="true" x="78" y="152" width="522" height="258" id="animatedElementId"></rect><path stroke="#8DADFF" stroke-width="2" fill="none" id="motionPath" d="M 347 565 L 350 562 L 361 556 L 380 547 L 436 518 L 520 475 L 630 428 L 765 372 L 867 335 L 936 299 L 972 273 L 976 259 L 962 247 L 920 236 L 856 229 L 774 233 L 688 264 L 642 302 L 638 324 L 671 340 L 735 356 L 820 367 L 905 380 L 936 389 L 940 393 L 930 404 L 916 426 L 901 456 L 896 483 L 910 498 L 927 506 L 941 512 L 944 513 L 939 516 L 927 522 L 917 528 L 908 539 L 902 548 L 902 554"></path><script>
            <![CDATA[
                this.play = true
                this.currentSpeed = 20
                let distanceCovered = 0;
                let isAnimationSaved = false;
                let isUpdateTime = false
                function animate(element) {
    const motionPath = document.getElementById('motionPath');
    const totalLength = motionPath.getTotalLength();
    distanceCovered = 0;
    let speed = this.currentSpeed;
    element.setAttribute("x", 0);
    element.setAttribute("y", 0);
    if (element.hasAttribute("r")) {
      element.setAttribute("cx", 0);
      element.setAttribute("cy", 0);
    }
    const moveAlongPath = () => {
      if (this.play) {
        const point = motionPath.getPointAtLength(distanceCovered);
        if (element.hasAttribute("d") || element.hasAttribute("points")) {
          const initialX = element.getPointAtLength(0).x;
          const initialY = element.getPointAtLength(0).y;
          element.setAttribute("transform", `translate(${point.x - initialX} ${point.y - initialY})`);
        } else {
          element.setAttribute("transform", `translate(${point.x} ${point.y})`);
        }
        speed = this.currentSpeed;
        distanceCovered += speed;
        if (distanceCovered <= totalLength) {
          requestAnimationFrame(moveAlongPath);
        } else {
          distanceCovered = 0;
          const newStartTime = Date.now();
          if (isUpdateTime) {
            _store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].setStartTime(newStartTime);
          }
          requestAnimationFrame(moveAlongPath);
          if (_store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].isAnimationSaved) {
            console.log("isSave");
            this.saveAnimatedSvg();
            _store_animationToolState__WEBPACK_IMPORTED_MODULE_1__["default"].isAnimationSaved = false;
          }
        }
        motionPath.style.display = "none";
      } else {
        requestAnimationFrame(moveAlongPath);
        motionPath.style.display = "block";
      }
    };
    moveAlongPath();
  }
                const animatedElement = document.getElementById('animatedElementId');
                animate(animatedElement);
            ]]>
        </script></svg>